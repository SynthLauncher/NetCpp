#include "../../include/windows/descriptor.hh"

int createSocketServer(const std::string address, const std::string port) {
    /*
        WSADATA provides information about the Windows Sockets implementation, such as:

        - The Winsock version supported by the system.
        - Descriptive information about the implementation.
        - System limitations (e.g., the maximum number of sockets).
    */
    WSADATA wsaData;

    // iResult is often used to store the return values of various functions, primary used to check whether a Winsock function call has succeeded or failed.
    int iResult;

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    /*
        addrinfo is a structure used in Winsock and POSIX systems to represent address information for network connection setup. I
    */
    struct addrinfo* result = nullptr;
    struct addrinfo hints;

    int iSendResult;
    
    // Buffer to hold the incoming data recieved from a connected socket.
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;

    /*
        MAKEWORD is a macro used to combine two bytes into a single WORD (16-bit value).
    */
    
    // Initializes Winsock.
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);

    // Checks if it is valid.
    if (iResult != 0) 
    {
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }

    /*
        ZeroMemory is a macro that clears a block of memory by filling it with zeroes.
    */
    ZeroMemory(&hints, sizeof(hints));

    hints.ai_family = AF_INET; // IPv4
    hints.ai_socktype = SOCK_STREAM; // Stream-oriented (TCP)
    hints.ai_flags = AI_PASSIVE; // Usees local address
    hints.ai_protocol = IPPROTO_TCP; // Sets explicitly to TCP


    // Resolves the server address and port.
    iResult = getaddrinfo(address.c_str(), port.c_str(), &hints, &result);

    // Checks if it is valid.
    if (iResult != 0) 
    {
        printf("getaddrinfo failed with error: %d\n", iResult);
       
        /*
            WSACleanup is a Winsock function that terminates the use of Winsock by the current process. It releases resources allocated by WSAStartup and prepares the system for Winsock to be uninitialized.
        */
        WSACleanup();

        return 1;
    }

    // Creates a SOCKET for the server to listen for client connections.
    ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);

    if (ListenSocket == INVALID_SOCKET) 
    {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        
        freeaddrinfo(result);
        WSACleanup();

        return 1;
    }

    // Setups the TCP listening socket
    iResult = bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);

    if (iResult == SOCKET_ERROR) 
    {
        printf("bind failed with error: %d\n", WSAGetLastError());

        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();

        return 1;
    }

    freeaddrinfo(result);

    /*
        SOMAXCONN = 0x7fffffff
    */
    iResult = listen(ListenSocket, SOMAXCONN);
    
    if (iResult == SOCKET_ERROR) 
    {
        printf("listen failed with error: %d\n", WSAGetLastError());
        
        closesocket(ListenSocket);
        WSACleanup();

        return 1;
    }

    // Accepts a client socket
    ClientSocket = accept(ListenSocket, NULL, NULL);

    if (ClientSocket == INVALID_SOCKET) 
    {
        /*
            WSAGetLastError function retrieves the last error code generated by a Winsock function call.
        */
        printf("accept failed with error: %d\n", WSAGetLastError());

        closesocket(ListenSocket);
        WSACleanup();

        return 1;
    }

    // Server socket is no longer needed
    closesocket(ListenSocket);

    // Recieves until the peer shuts down the connection
    do {
        /*
            recv function receives data from a connected socket.
        */
        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);

        if (iResult > 0)
        {
            printf("Bytes recieved: %d\n", iResult);

            // Echos the buffer back to the sender.
            iSendResult = send(ClientSocket, recvbuf, iResult, 0);

            if (iSendResult == SOCKET_ERROR)
            {
                printf("send failed with error: %d\n", WSAGetLastError());

                closesocket(ClientSocket);
                WSACleanup();

                return 1;
            }

            printf("Bytes sent: %d\n", iSendResult);
        }
        else if (iResult == 0)
        {
            printf("Connection closing...\n");
        }
        else
        {
            printf("recv failed with error: %d\n", WSAGetLastError());
            
            closesocket(ClientSocket);
            WSACleanup();

            return 1;
        }
    } while (iResult > 0);

    // Shuts down the connection since we're done.
    iResult = shutdown(ClientSocket, SD_SEND);

    if (iResult == SOCKET_ERROR)
    {
        printf("shutdown failed with error: %d\n", WSAGetLastError());

        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }

    // Clean up
    closesocket(ClientSocket);
    WSACleanup();

    return 0;
}